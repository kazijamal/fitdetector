// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

// Custom
model Outfit {
    id          String         @id @default(cuid())
    createdAt   DateTime       @default(now())
    user        User           @relation(fields: [userId], references: [id])
    userId      String
    celebrity   Celebrity      @relation(fields: [celebrityId], references: [id])
    celebrityId String
    image       String
    description String?
    source      String?
    rating      Float?
    ratings     OutfitRating[]
    clothing    Clothing[]
}

model OutfitRating {
    id       String @id @default(cuid())
    outfit   Outfit @relation(fields: [outfitId], references: [id])
    outfitId String
    user     User   @relation(fields: [userId], references: [id])
    userId   String
    value    Int
}

model Clothing {
    id        String         @id @default(cuid())
    createdAt DateTime       @default(now())
    outfit    Outfit         @relation(fields: [outfitId], references: [id])
    outfitId  String
    user      User           @relation(fields: [userId], references: [id])
    userId    String
    type      String
    brand     String
    price     Float?
    link      String
    vote      Int            @default(0)
    votes     ClothingVote[]
}

model ClothingVote {
    id         String   @id @default(cuid())
    clothing   Clothing @relation(fields: [clothingId], references: [id])
    clothingId String
    user       User     @relation(fields: [userId], references: [id])
    userId     String
    value      Int
}

model Celebrity {
    id      String   @id @default(cuid())
    name    String
    outfits Outfit[]
    Follow  Follow[]
}

model Follow {
    id          String    @id @default(cuid())
    user        User      @relation(fields: [userId], references: [id])
    userId      String
    celebrity   Celebrity @relation(fields: [celebrityId], references: [id])
    celebrityId String
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    // Custom
    outfits       Outfit[]
    outfitRatings OutfitRating[]
    clothing      Clothing[]
    clothingVotes ClothingVote[]
    follows       Follow[]
    reputation    Int            @default(100)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
